{"version":3,"sources":["map.js","viewmodel.js","dataArray.js"],"names":["initMap","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","locations","dataArray","largeInfowindow","InfoWindow","bounds","LatLngBounds","i","length","position","location","title","genre","marker","Marker","animation","Animation","DROP","id","markers","push","addListener","populateInfoWindow","this","toggleBounce","extend","fitBounds","getAnimation","setAnimation","BOUNCE","setTimeout","infowindow","setContent","open","setMarker","selectMarker","ViewModel","self","list","ko","observableArray","currentFilter","observable","locationSelect","loc","event","trigger","filterProducts","computed","utils","arrayFilter","prod","remove","console","log","filter","applyBindings"],"mappings":"AAKA,QAAAA,WAEAC,IAAA,GAAAC,QAAAC,KAAAC,IAAAC,SAAAC,eAAA,QACAC,QACAC,IAAA,WACAC,KAAA,YAEAC,KAAA,IAQA,KAAA,GAJAC,GAAAC,UACAC,EAAA,GAAAX,QAAAC,KAAAW,WACAC,EAAA,GAAAb,QAAAC,KAAAa,aAEAC,EAAA,EAAAA,EAAAN,EAAAO,OAAAD,IAAA,CAEA,GAAAE,GAAAR,EAAAM,GAAAG,SACAC,EAAAV,EAAAM,GAAAI,MACAC,EAAAX,EAAAM,GAAAK,MAEAC,EAAA,GAAArB,QAAAC,KAAAqB,QACAvB,IAAAA,IACAkB,SAAAA,EACAE,MAAAA,EACAC,MAAAA,EACAG,UAAAvB,OAAAC,KAAAuB,UAAAC,KACAC,GAAAX,GAGAY,SAAAC,KAAAP,GAEAA,EAAAQ,YAAA,QAAA,WACAC,mBAAAC,KAAApB,GACAqB,aAAAD,QAEAlB,EAAAoB,OAAAN,UAAAZ,GAAAE,UAGAlB,IAAAmC,UAAArB,GAGA,QAAAmB,cAAAX,GACA,OAAAA,EAAAc,eACAd,EAAAe,aAAA,OAEAf,EAAAe,aAAApC,OAAAC,KAAAuB,UAAAa,QACAC,WAAA,WACAjB,EAAAe,aAAA,OACA,MAMA,QAAAN,oBAAAT,EAAAkB,GAEAA,EAAAlB,QAAAA,IACAkB,EAAAlB,OAAAA,EACAkB,EAAAC,WAAA,QAAAnB,EAAAF,MAAA,UACAoB,EAAAE,KAAA1C,IAAAsB,GAEAkB,EAAAV,YAAA,aAAA,WACAU,EAAAG,UAAA,SAKA,QAAAC,cAAAtB,GACA,IAAA,GAAAN,GAAA,EAAAA,EAAAY,QAAAX,OAAAD,IACAM,EAAAF,OAAAQ,QAAAZ,GAAAI,MCzEA,QAAAyB,aACA,GAAAC,GAAAd,IACAc,GAAAC,KAAAC,GAAAC,gBAAAtC,WACAmC,EAAAI,cAAAF,GAAAG,aACAL,EAAAM,eAAA,SAAAC,GACApD,OAAAC,KAAAoD,MAAAC,QAAA3B,UAAAyB,EAAA1B,IAAA,UAIAmB,EAAAU,eAAAR,GAAAS,SAAA,WAEA,MAAAX,GAAAI,gBAIAF,GAAAU,MAAAC,YAAA/B,UAAA,SAAAgC,GAEA,GAAAA,EAAAvC,OACAO,QAAAiC,OAAAD,GAEAE,QAAAC,IAAAnC,aAPAA,YAeAkB,EAAAkB,OAAA,SAAA3C,GACAyB,EAAAI,cAAA7B,IC/BA,GAAAV,aACAS,MAAA,qBACAD,UACAZ,IAAA,WACAC,KAAA,YAEAa,MAAA,MAEAD,MAAA,eACAD,UACAZ,IAAA,WACAC,KAAA,YAEAa,MAAA,MAEAD,MAAA,+BACAD,UACAZ,IAAA,WACAC,KAAA,YAEAa,MAAA,MAEAD,MAAA,0BACAD,UACAZ,IAAA,WACAC,KAAA,WAEAa,MAAA,MAEAD,MAAA,6BACAD,UACAZ,IAAA,WACAC,KAAA,YAEAa,MAAA,MAEAD,MAAA,wBACAD,UACAZ,IAAA,WACAC,KAAA,YAEAa,MAAA,MFxCArB,IAEA4B,QAAAoB,GAAAC,iBCoCAD,IAAAiB,cAAA,GAAApB","file":"../js/scripts.min.js","sourcesContent":["// Create a map variable\nvar map;\n// Create a new blank array for all the listing markers.\nvar markers = ko.observableArray();\n\nfunction initMap() {\n    // Constructor creates a new map - only center and zoom are required.\n    map = new google.maps.Map(document.getElementById('map'), {\n        center: {\n            lat: 40.7413549,\n            lng: -73.9980244\n        },\n        zoom: 13\n    });\n    // These are the real estate listings that will be shown to the user.\n    // Normally we'd have these in a database instead.\n    var locations = dataArray;\n    var largeInfowindow = new google.maps.InfoWindow();\n    var bounds = new google.maps.LatLngBounds();\n    // The following group uses the location array to create an array of markers on initialize.\n    for (var i = 0; i < locations.length; i++) {\n        // Get the position from the location array.\n        var position = locations[i].location;\n        var title = locations[i].title;\n        var genre = locations[i].genre;\n        // Create a marker per location, and put into markers array.\n        var marker = new google.maps.Marker({\n            map: map,\n            position: position,\n            title: title,\n            genre: genre,\n            animation: google.maps.Animation.DROP,\n            id: i\n        });\n        // Push the marker to our array of markers.\n        markers.push(marker);\n        // Create an onclick event to open an infowindow at each marker.\n        marker.addListener('click', function() {\n            populateInfoWindow(this, largeInfowindow);\n            toggleBounce(this);\n        });\n        bounds.extend(markers()[i].position);\n    }\n    // Extend the boundaries of the map for each marker\n    map.fitBounds(bounds);\n}\n// Set animation \nfunction toggleBounce(marker) {\n    if (marker.getAnimation() !== null) {\n        marker.setAnimation(null);\n    } else {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n        setTimeout(function() {\n            marker.setAnimation(null);\n        }, 750);\n    }\n}\n// This function populates the infowindow when the marker is clicked. We'll only allow\n// one infowindow which will open at the marker that is clicked, and populate based\n// on that markers position.\nfunction populateInfoWindow(marker, infowindow) {\n    // Check to make sure the infowindow is not already opened on this marker.\n    if (infowindow.marker != marker) {\n        infowindow.marker = marker;\n        infowindow.setContent('<div>' + marker.title + '</div>');\n        infowindow.open(map, marker);\n        // Make sure the marker property is cleared if the infowindow is closed.\n        infowindow.addListener('closeclick', function() {\n            infowindow.setMarker(null);\n        });\n    }\n}\n\nfunction selectMarker(marker) {\n    for (var i = 0; i < markers.length; i++) {\n        if (marker.title == markers[i].title) {\n            //this is the marker on the map\n        }\n    }\n}","//ViewModel\n\nfunction ViewModel() {\n    var self = this;\n    self.list = ko.observableArray(dataArray);\n    self.currentFilter = ko.observable();\n    self.locationSelect = function(loc) {\n        google.maps.event.trigger(markers()[loc.id], 'click');\n    };\n\n\n    self.filterProducts = ko.computed(function() {\n\n        if (!self.currentFilter()) {\n            //console.log('nofilter');\n            return markers();\n        } else {\n            return ko.utils.arrayFilter(markers(), function(prod) {\n\n                if (prod.genre == 0) {\n                    markers.remove(prod);\n                }\n                console.log(markers());\n\n                //return prod.genre == self.currentFilter();\n            });\n        }\n    });\n\n\n    self.filter = function(genre) {\n        self.currentFilter(genre);\n        //console.log(self.currentFilter());\n\n\n    }\n}\n\n// Activates knockout.js\nko.applyBindings(new ViewModel());","var dataArray = [{\n    title: 'Park Ave Penthouse',\n    location: {\n        lat: 40.7713024,\n        lng: -73.9632393\n    },\n    genre: '1'\n}, {\n    title: 'Chelsea Loft',\n    location: {\n        lat: 40.7444883,\n        lng: -73.9949465\n    },\n    genre: '0'\n}, {\n    title: 'Union Square Open Floor Plan',\n    location: {\n        lat: 40.7347062,\n        lng: -73.9895759\n    },\n    genre: '1'\n}, {\n    title: 'East Village Hip Studio',\n    location: {\n        lat: 40.7281777,\n        lng: -73.984377\n    },\n    genre: '0'\n}, {\n    title: 'TriBeCa Artsy Bachelor Pad',\n    location: {\n        lat: 40.7195264,\n        lng: -74.0089934\n    },\n    genre: '1'\n}, {\n    title: 'Chinatown Homey Space',\n    location: {\n        lat: 40.7180628,\n        lng: -73.9961237\n    },\n    genre: '0'\n}];"]}